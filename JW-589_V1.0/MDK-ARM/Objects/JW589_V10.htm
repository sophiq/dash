<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\JW589_V10.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\JW589_V10.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Mar 28 15:04:55 2024
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Idle &rArr; MainLoop &rArr; lcd_display_ready_task &rArr; lcd_display_odograph &rArr; getfloatinfo &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">NMI_Handler</a><BR>
 <LI><a href="#[d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">HardFault_Handler</a><BR>
 <LI><a href="#[e]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SVC_Handler</a><BR>
 <LI><a href="#[f]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">PendSV_Handler</a><BR>
 <LI><a href="#[10]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[24]">AES_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2d]">ATIM_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[29]">BSTIM_IRQHandler</a> from bstim16.o(i.BSTIM_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[30]">CAN_IRQHandler</a> from can.o(i.CAN_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[23]">CCL_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2a]">COMPx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[17]">DAC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[26]">DMA_IRQHandler</a> from adc.o(i.DMA_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[15]">FDET_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2f]">GPIO_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2b]">GPTIM0_1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2c]">GPTIM2_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[22]">I2C_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[33]">IsKeyDownFunc</a> from bsp_key.o(i.IsKeyDownFunc) referenced from bsp_key.o(i.bsp_DetectKey)
 <LI><a href="#[25]">LPTIM_IRQHandler</a> from lptim32.o(i.LPTIM_IRQHandler) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[21]">LPUARTx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[28]">LUT_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[18]">SPI0_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[12]">SVD_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[31]">SystemInit</a> from system_fm33lg0xx.o(i.SystemInit) referenced from startup_fm33lg0xx.o(.text)
 <LI><a href="#[20]">U7816_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1b]">UART0_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1d]">UART3_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1e]">UART4_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[1f]">UART5_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[2e]">VREF_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[11]">WDT_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[27]">WKUPx_IRQHandler</a> from startup_fm33lg0xx.o(.text) referenced from startup_fm33lg0xx.o(RESET)
 <LI><a href="#[34]">__main</a> from __main.o(!!!main) referenced from startup_fm33lg0xx.o(.text)
 <LI><a href="#[7]">timer_100ms</a> from lptim32.o(i.timer_100ms) referenced 2 times from lptim32.o(.data)
 <LI><a href="#[a]">timer_1s</a> from lptim32.o(i.timer_1s) referenced 2 times from lptim32.o(.data)
 <LI><a href="#[8]">timer_250ms</a> from lptim32.o(i.timer_250ms) referenced 2 times from lptim32.o(.data)
 <LI><a href="#[5]">timer_25ms</a> from lptim32.o(i.timer_25ms) referenced 2 times from lptim32.o(.data)
 <LI><a href="#[9]">timer_500ms</a> from lptim32.o(i.timer_500ms) referenced 2 times from lptim32.o(.data)
 <LI><a href="#[6]">timer_50ms</a> from lptim32.o(i.timer_50ms) referenced 2 times from lptim32.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[35]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[37]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[102]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[104]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[3b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[105]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[106]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[107]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[108]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[109]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[111]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[112]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[113]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[114]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[115]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[116]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[117]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[118]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[119]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[40]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[11a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[11b]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[11c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[11d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[11e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[11f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[36]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[122]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[38]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[123]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Idle &rArr; MainLoop &rArr; lcd_display_ready_task &rArr; lcd_display_odograph &rArr; getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[124]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[5f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[125]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[41]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ATIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CCL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>COMPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>FDET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>GPTIM0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>GPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>LPUARTx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>LUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>U7816_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>VREF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>WKUPx_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_fm33lg0xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_fm33lg0xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[127]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[43]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMsg
</UL>

<P><STRONG><a name="[128]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUartInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYINPUT_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM_Setup
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SystemClock_Config
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdgpioinit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CAN_Init
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[12a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_UART_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetPLLClockFreq
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetLevelByPercent
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_time
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_speed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_battery
</UL>

<P><STRONG><a name="[12c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_animation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
</UL>

<P><STRONG><a name="[12f]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
</UL>

<P><STRONG><a name="[47]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
</UL>

<P><STRONG><a name="[4a]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
</UL>

<P><STRONG><a name="[4d]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[4c]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
</UL>

<P><STRONG><a name="[131]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>

<P><STRONG><a name="[132]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_animation
</UL>

<P><STRONG><a name="[133]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_animation
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
</UL>

<P><STRONG><a name="[134]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
</UL>

<P><STRONG><a name="[135]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
</UL>

<P><STRONG><a name="[52]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[51]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[136]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_FIFO_Read
</UL>

<P><STRONG><a name="[137]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[59]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[57]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[58]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[5a]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[39]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3e]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5b]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[13a]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[13b]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>ATIM_Init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, atim.o(i.ATIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ATIM_Init &rArr; FL_ATIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[62]"></a>BSTIM16_Init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bstim16.o(i.BSTIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSTIM16_Init &rArr; FL_BSTIM16_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_BSTIM16_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>BSTIM_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, bstim16.o(i.BSTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSTIM_IRQHandler &rArr; can_reset_with_send &rArr; FL_CAN_Frame_Send &rArr; FL_CAN_FIFO_Write &rArr; FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset_with_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, can.o(i.CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CAN_IRQHandler &rArr; FL_CAN_FIFO_Read &rArr; __aeabi_cfcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_FIFO_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN_SetMsg</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, can.o(i.CAN_SetMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_SetMsg
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset_with_send
</UL>

<P><STRONG><a name="[6a]"></a>Can_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, can.o(i.Can_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Can_Init &rArr; MF_CAN_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>DMA_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adc.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DMA_ClearFlag_TransferComplete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DebugUartInit</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, user_init.o(i.DebugUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = DebugUartInit &rArr; FL_UART_Init &rArr; FL_CMU_GetAPBClockFreq &rArr; FL_CMU_GetAHBClockFreq &rArr; FL_CMU_GetSystemClockFreq &rArr; FL_CMU_GetPLLClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_UART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
</UL>

<P><STRONG><a name="[71]"></a>DisplayAnimation</STRONG> (Thumb, 456 bytes, Stack size 8 bytes, display.o(i.DisplayAnimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DisplayAnimation &rArr; lcd_display_animation &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_show_all_symbols
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_clear_all_flags
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_animation
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do250ms
</UL>

<P><STRONG><a name="[76]"></a>DisplaySystemInformation</STRONG> (Thumb, 2246 bytes, Stack size 56 bytes, display.o(i.DisplaySystemInformation))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DisplaySystemInformation &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_clear_all_flags
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do25ms
</UL>

<P><STRONG><a name="[84]"></a>FLASH_Program_Para</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, eeprom.o(i.FLASH_Program_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FLASH_Program_Para &rArr; FL_FLASH_Program_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
</UL>

<P><STRONG><a name="[87]"></a>FLASH_Read_Para</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, eeprom.o(i.FLASH_Read_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FLASH_Read_Para
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadHalfWord
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
</UL>

<P><STRONG><a name="[61]"></a>FL_ATIM_Init</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, fm33lg0xx_fl_atim.o(i.FL_ATIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_ATIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup4BusClock
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_SetCounterAlignedMode
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_IsActiveFlag_Update
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_GenerateUpdateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_Init
</UL>

<P><STRONG><a name="[63]"></a>FL_BSTIM16_Init</STRONG> (Thumb, 302 bytes, Stack size 8 bytes, fm33lg0xx_fl_bstim16.o(i.FL_BSTIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_BSTIM16_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM16_Init
</UL>

<P><STRONG><a name="[68]"></a>FL_CAN_FIFO_Read</STRONG> (Thumb, 1136 bytes, Stack size 16 bytes, can.o(i.FL_CAN_FIFO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_CAN_FIFO_Read &rArr; __aeabi_cfcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[90]"></a>FL_CAN_FIFO_Write</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, can.o(i.FL_CAN_FIFO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FL_CAN_FIFO_Write &rArr; FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_Frame_Send
</UL>

<P><STRONG><a name="[92]"></a>FL_CAN_Frame_Send</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, can.o(i.FL_CAN_Frame_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FL_CAN_Frame_Send &rArr; FL_CAN_FIFO_Write &rArr; FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_FIFO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset_with_send
</UL>

<P><STRONG><a name="[93]"></a>FL_CAN_Init</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, fm33lg0xx_fl_can.o(i.FL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset_with_send
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CAN_Init
</UL>

<P><STRONG><a name="[95]"></a>FL_CMU_GetAHBClockFreq</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fm33lg0xx_fl_cmu.o(i.FL_CMU_GetAHBClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FL_CMU_GetAHBClockFreq &rArr; FL_CMU_GetSystemClockFreq &rArr; FL_CMU_GetPLLClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetSystemClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetAPBClockFreq
</UL>

<P><STRONG><a name="[97]"></a>FL_CMU_GetAPBClockFreq</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fm33lg0xx_fl_cmu.o(i.FL_CMU_GetAPBClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FL_CMU_GetAPBClockFreq &rArr; FL_CMU_GetAHBClockFreq &rArr; FL_CMU_GetSystemClockFreq &rArr; FL_CMU_GetPLLClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetAHBClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_UART_Init
</UL>

<P><STRONG><a name="[98]"></a>FL_CMU_GetPLLClockFreq</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, fm33lg0xx_fl_cmu.o(i.FL_CMU_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_CMU_GetPLLClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetRCHFClockFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetSystemClockFreq
</UL>

<P><STRONG><a name="[99]"></a>FL_CMU_GetRCHFClockFreq</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fm33lg0xx_fl_cmu.o(i.FL_CMU_GetRCHFClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_UART_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetSystemClockFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetPLLClockFreq
</UL>

<P><STRONG><a name="[9b]"></a>FL_CMU_GetRCLFClockFreq</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fm33lg0xx_fl_cmu.o(i.FL_CMU_GetRCLFClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetSystemClockFreq
</UL>

<P><STRONG><a name="[96]"></a>FL_CMU_GetSystemClockFreq</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fm33lg0xx_fl_cmu.o(i.FL_CMU_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_CMU_GetSystemClockFreq &rArr; FL_CMU_GetPLLClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetRCLFClockFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetRCHFClockFreq
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_UART_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SystemClock_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetAHBClockFreq
</UL>

<P><STRONG><a name="[bd]"></a>FL_DelayInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fm33lg0xx_fl.o(i.FL_DelayInit))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
</UL>

<P><STRONG><a name="[91]"></a>FL_DelayMs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(i.FL_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdgpioinit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_FIFO_Write
</UL>

<P><STRONG><a name="[9c]"></a>FL_DelayUs</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(i.FL_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
</UL>

<P><STRONG><a name="[85]"></a>FL_FLASH_PageErase</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_PageErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FL_FLASH_PageErase
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_UnlockFlash
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_SetFlashEraseType
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_LockFlash
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_KeyError
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_EraseComplete
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_ClockError
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_AuthenticationError
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_GetFlashLockStatus
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_EnableErase
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_ClearFlag_EraseComplete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup2BusClock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_DisableGroup3OperationClock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_DisableGroup2BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Para
</UL>

<P><STRONG><a name="[86]"></a>FL_FLASH_Program_Word</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_Program_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FL_FLASH_Program_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_PRIMASK
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_UnlockFlash
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_LockFlash
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_ProgramComplete
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_KeyError
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_ClockError
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_IsActiveFlag_AuthenticationError
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_GetFlashLockStatus
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_EnableProgram
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup2BusClock
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_DisableGroup3OperationClock
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_DisableGroup2BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Para
</UL>

<P><STRONG><a name="[6f]"></a>FL_GPIO_Init</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinOpenDrain
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinInput
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinAnalogSwitch
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_SetPinMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinRemap
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_DisablePinPullup
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUartInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYINPUT_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM_Setup
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SystemClock_Config
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdgpioinit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CAN_Init
</UL>

<P><STRONG><a name="[b5]"></a>FL_GPTIM_Init</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_GPTIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_SetCounterAlignedMode
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_GenerateUpdateEvent
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup4BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM_Setup
</UL>

<P><STRONG><a name="[b9]"></a>FL_GPTIM_OC_Init</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FL_GPTIM_OC_Init &rArr; OCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OCConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_GenerateUpdateEvent
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_CC_SetChannelMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM_Setup
</UL>

<P><STRONG><a name="[c4]"></a>FL_IWDT_Init</STRONG> (Thumb, 178 bytes, Stack size 12 bytes, fm33lg0xx_fl_iwdt.o(i.FL_IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_IWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
</UL>

<P><STRONG><a name="[bc]"></a>FL_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fm33lg0xx_fl.o(i.FL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>FL_LPTIM32_Init</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, fm33lg0xx_fl_lptim32.o(i.FL_LPTIM32_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FL_LPTIM32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_SetETRTriggerEdge
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM32_Setup
</UL>

<P><STRONG><a name="[d1]"></a>FL_LPTIM32_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fm33lg0xx_fl_lptim32.o(i.FL_LPTIM32_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM32_Setup
</UL>

<P><STRONG><a name="[70]"></a>FL_UART_Init</STRONG> (Thumb, 692 bytes, Stack size 24 bytes, fm33lg0xx_fl_uart.o(i.FL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FL_UART_Init &rArr; FL_CMU_GetAPBClockFreq &rArr; FL_CMU_GetAHBClockFreq &rArr; FL_CMU_GetSystemClockFreq &rArr; FL_CMU_GetPLLClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetSystemClockFreq
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetRCHFClockFreq
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetAPBClockFreq
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3OperationClock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_EnableGroup3BusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUartInit
</UL>

<P><STRONG><a name="[c2]"></a>GPTIM_Setup</STRONG> (Thumb, 112 bytes, Stack size 72 bytes, gptim.o(i.GPTIM_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = GPTIM_Setup &rArr; FL_GPTIM_OC_Init &rArr; OCConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>GetBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.GetBit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_io_refresh
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_time
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_tempture
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_speed
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_battery
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_ShowRectangeEx
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_FIFO_Read
</UL>

<P><STRONG><a name="[c3]"></a>IWDT_Init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, idwt.o(i.IWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IWDT_Init &rArr; FL_IWDT_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_IWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>Idle</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, idle.o(i.Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Idle &rArr; MainLoop &rArr; lcd_display_ready_task &rArr; lcd_display_odograph &rArr; getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_show_all_symbols
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_DisplayAll
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_ClearAllPoints
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_Frame_Send
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMsg
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>IsKeyDownFunc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, bsp_key.o(i.IsKeyDownFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKeyDownFunc &rArr; KeyPinActive
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyPinActive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp_key.o(i.bsp_DetectKey)
</UL>
<P><STRONG><a name="[cf]"></a>KEYINPUT_Init</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, user_init.o(i.KEYINPUT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = KEYINPUT_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>LPTIM32_Setup</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, lptim32.o(i.LPTIM32_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LPTIM32_Setup &rArr; FL_LPTIM32_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_StructInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, lptim32.o(i.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPTIM_IRQHandler &rArr; bsp_KeyScan10ms &rArr; bsp_DetectKey
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_run
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan10ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>LcdConfig</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, lcd.o(i.LcdConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LcdConfig &rArr; lcdgpioinit &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrins
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrdata
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdgpioinit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[d8]"></a>LedInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, user_init.o(i.LedInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LedInit &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_ResetOutputPin
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
</UL>

<P><STRONG><a name="[ca]"></a>LedSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gptim.o(i.LedSet))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_io_refresh
</UL>

<P><STRONG><a name="[dc]"></a>MF_SystemClock_Config</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, mf_config.o(i.MF_SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MF_SystemClock_Config &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetSystemClockFreq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>MainLoop</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, systemrunning.o(i.MainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MainLoop &rArr; lcd_display_ready_task &rArr; lcd_display_odograph &rArr; getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PopEvent
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Empty
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do50ms
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do500ms
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do25ms
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do250ms
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1s
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do100ms
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_go_task
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[df]"></a>PopEvent</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, event.o(i.PopEvent))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[fa]"></a>PushEvent</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, event.o(i.PushEvent))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_50ms
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_500ms
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_25ms
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_250ms
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_1s
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_100ms
</UL>

<P><STRONG><a name="[c6]"></a>Read</STRONG> (Thumb, 80 bytes, Stack size 4 bytes, eeprom.o(i.Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read &rArr; FLASH_Read_Para
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[88]"></a>ReadHalfWord</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eeprom.o(i.ReadHalfWord))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_Para
</UL>

<P><STRONG><a name="[c9]"></a>SC5037_ClearAllPoints</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd.o(i.SC5037_ClearAllPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SC5037_ClearAllPoints
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrins
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrdata
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[cb]"></a>SC5037_DisplayAll</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lcd.o(i.SC5037_DisplayAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SC5037_DisplayAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrins
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[e3]"></a>SC5037_ShowRectangeEx</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, lcd.o(i.SC5037_ShowRectangeEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SC5037_ShowRectangeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrins
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrdata
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_go_task
</UL>

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 210 bytes, Stack size 0 bytes, system_fm33lg0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_fm33lg0xx.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>UserInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, user_init.o(i.UserInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UserInit &rArr; DebugUartInit &rArr; FL_UART_Init &rArr; FL_CMU_GetAPBClockFreq &rArr; FL_CMU_GetAHBClockFreq &rArr; FL_CMU_GetSystemClockFreq &rArr; FL_CMU_GetPLLClockFreq &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugUartInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>Write</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, eeprom.o(i.Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Write &rArr; FLASH_Program_Para &rArr; FL_FLASH_Program_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_io_refresh
</UL>

<P><STRONG><a name="[74]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd00_y094889vttfgs.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetSystemClockFreq
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnimation
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_animation
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CMU_GetPLLClockFreq
</UL>

<P><STRONG><a name="[42]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, user_init.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[ea]"></a>bsp_GetKey</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_GetKey))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
</UL>

<P><STRONG><a name="[e7]"></a>bsp_InitKey</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_InitKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_InitKey &rArr; bsp_InitKeyHard &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyVar
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKeyHard
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>bsp_KeyScan10ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_KeyScan10ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_KeyScan10ms &rArr; bsp_DetectKey
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectKey
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>bsp_PutKey</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_PutKey))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_DetectKey
</UL>

<P><STRONG><a name="[65]"></a>can_reset_with_send</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, can.o(i.can_reset_with_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = can_reset_with_send &rArr; FL_CAN_Frame_Send &rArr; FL_CAN_FIFO_Write &rArr; FL_DelayMs &rArr; FL_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_Frame_Send
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SetMsg
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_EnableIT_RXOK
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>get_key</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, bsp_key.o(i.get_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_key
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_GetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[eb]"></a>getfloatinfo</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, lcd00_y094889vttfgs.o(i.getfloatinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_tempture
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
</UL>

<P><STRONG><a name="[73]"></a>lcd_display_animation</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, lcd00_y094889vttfgs.o(i.lcd_display_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lcd_display_animation &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnimation
</UL>

<P><STRONG><a name="[72]"></a>lcd_display_clear_all_flags</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, lcd00_y094889vttfgs.o(i.lcd_display_clear_all_flags))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnimation
</UL>

<P><STRONG><a name="[de]"></a>lcd_display_go_task</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lcd00_y094889vttfgs.o(i.lcd_display_go_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_display_go_task &rArr; SC5037_ShowRectangeEx
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_ShowRectangeEx
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[dd]"></a>lcd_display_ready_task</STRONG> (Thumb, 590 bytes, Stack size 56 bytes, lcd00_y094889vttfgs.o(i.lcd_display_ready_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lcd_display_ready_task &rArr; lcd_display_odograph &rArr; getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_time
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_tempture
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_speed
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_shift
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_battery
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[75]"></a>lcd_display_show_all_symbols</STRONG> (Thumb, 548 bytes, Stack size 0 bytes, lcd00_y094889vttfgs.o(i.lcd_display_show_all_symbols))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnimation
</UL>

<P><STRONG><a name="[3d]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; Idle &rArr; MainLoop &rArr; lcd_display_ready_task &rArr; lcd_display_odograph &rArr; getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM32_Setup
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEYINPUT_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDT_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPTIM_Setup
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM16_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATIM_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7b]"></a>modf</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, modf.o(i.modf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = modf &rArr; __aeabi_dsub
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
</UL>

<P><STRONG><a name="[81]"></a>task_io_refresh</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, systemrunning.o(i.task_io_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = task_io_refresh &rArr; Write &rArr; FLASH_Program_Para &rArr; FL_FLASH_Program_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do25ms
</UL>

<P><STRONG><a name="[7e]"></a>task_odograph_counting</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, systemrunning.o(i.task_odograph_counting))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = task_odograph_counting &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do1s
</UL>

<P><STRONG><a name="[83]"></a>task_time_flashing</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systemrunning.o(i.task_time_flashing))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do500ms
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_odograph
</UL>

<P><STRONG><a name="[fb]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
</UL>

<P><STRONG><a name="[fc]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_FIFO_Read
</UL>

<P><STRONG><a name="[fe]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
</UL>

<P><STRONG><a name="[ff]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
</UL>

<P><STRONG><a name="[100]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d9]"></a>FL_GPIO_ResetOutputPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, user_init.o(i.FL_GPIO_ResetOutputPin))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
</UL>

<P><STRONG><a name="[6c]"></a>FL_DMA_ClearFlag_TransferComplete</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, adc.o(i.FL_DMA_ClearFlag_TransferComplete))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[ce]"></a>KeyPinActive</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bsp_key.o(i.KeyPinActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KeyPinActive
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownFunc
</UL>

<P><STRONG><a name="[e5]"></a>bsp_DetectKey</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bsp_key.o(i.bsp_DetectKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_DetectKey
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_PutKey
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_KeyScan10ms
</UL>

<P><STRONG><a name="[e9]"></a>bsp_InitKeyHard</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, bsp_key.o(i.bsp_InitKeyHard))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsp_InitKeyHard &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
</UL>

<P><STRONG><a name="[e8]"></a>bsp_InitKeyVar</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, bsp_key.o(i.bsp_InitKeyVar))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_InitKey
</UL>

<P><STRONG><a name="[d2]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lptim32.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM32_Setup
</UL>

<P><STRONG><a name="[7]"></a>timer_100ms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lptim32.o(i.timer_100ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_100ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptim32.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>timer_1s</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lptim32.o(i.timer_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_1s
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptim32.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>timer_250ms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lptim32.o(i.timer_250ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_250ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptim32.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>timer_25ms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lptim32.o(i.timer_25ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_25ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptim32.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>timer_500ms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lptim32.o(i.timer_500ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_500ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptim32.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>timer_50ms</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lptim32.o(i.timer_50ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_50ms
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PushEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lptim32.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>timer_run</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lptim32.o(i.timer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_run
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>FL_CAN_EnableIT_RXOK</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can.o(i.FL_CAN_EnableIT_RXOK))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset_with_send
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CAN_Init
</UL>

<P><STRONG><a name="[6b]"></a>MF_CAN_Init</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, can.o(i.MF_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MF_CAN_Init &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_Init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_EnableIT_RXOK
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Can_Init
</UL>

<P><STRONG><a name="[db]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, can.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MF_CAN_Init
</UL>

<P><STRONG><a name="[64]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, bstim16.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSTIM16_Init
</UL>

<P><STRONG><a name="[d5]"></a>lcdgpioinit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lcd.o(i.lcdgpioinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = lcdgpioinit &rArr; FL_GPIO_Init &rArr; FL_GPIO_SetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_DelayMs
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdConfig
</UL>

<P><STRONG><a name="[d7]"></a>wrdata</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, lcd.o(i.wrdata))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_ClearAllPoints
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_ShowRectangeEx
</UL>

<P><STRONG><a name="[d6]"></a>wrins</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, lcd.o(i.wrins))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_DisplayAll
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_ClearAllPoints
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SC5037_ShowRectangeEx
</UL>

<P><STRONG><a name="[ed]"></a>lcd_display_battery</STRONG> (Thumb, 2306 bytes, Stack size 24 bytes, lcd00_y094889vttfgs.o(i.lcd_display_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_display_battery &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
</UL>

<P><STRONG><a name="[ee]"></a>lcd_display_odograph</STRONG> (Thumb, 5368 bytes, Stack size 104 bytes, lcd00_y094889vttfgs.o(i.lcd_display_odograph))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lcd_display_odograph &rArr; getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modf
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
</UL>

<P><STRONG><a name="[f2]"></a>lcd_display_shift</STRONG> (Thumb, 918 bytes, Stack size 8 bytes, lcd00_y094889vttfgs.o(i.lcd_display_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcd_display_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
</UL>

<P><STRONG><a name="[f4]"></a>lcd_display_speed</STRONG> (Thumb, 900 bytes, Stack size 24 bytes, lcd00_y094889vttfgs.o(i.lcd_display_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_display_speed &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
</UL>

<P><STRONG><a name="[f1]"></a>lcd_display_tempture</STRONG> (Thumb, 844 bytes, Stack size 32 bytes, lcd00_y094889vttfgs.o(i.lcd_display_tempture))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lcd_display_tempture &rArr; getfloatinfo &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getfloatinfo
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
</UL>

<P><STRONG><a name="[f3]"></a>lcd_display_time</STRONG> (Thumb, 1224 bytes, Stack size 40 bytes, lcd00_y094889vttfgs.o(i.lcd_display_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_display_time &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_display_ready_task
</UL>

<P><STRONG><a name="[66]"></a>BatteryGetLevelByPercent</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, systemrunning.o(i.BatteryGetLevelByPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BatteryGetLevelByPercent &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Do500ms
</UL>

<P><STRONG><a name="[e2]"></a>Do100ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, systemrunning.o(i.Do100ms))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[7d]"></a>Do1s</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, systemrunning.o(i.Do1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Do1s &rArr; task_odograph_counting &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_odograph_counting
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[7f]"></a>Do250ms</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, systemrunning.o(i.Do250ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Do250ms &rArr; DisplayAnimation &rArr; lcd_display_animation &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayAnimation
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[80]"></a>Do25ms</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, systemrunning.o(i.Do25ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Do25ms &rArr; DisplaySystemInformation &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySystemInformation
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_io_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[82]"></a>Do500ms</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, systemrunning.o(i.Do500ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Do500ms &rArr; BatteryGetLevelByPercent &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_time_flashing
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetLevelByPercent
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[e1]"></a>Do50ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, systemrunning.o(i.Do50ms))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[e0]"></a>Empty</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, systemrunning.o(i.Empty))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainLoop
</UL>

<P><STRONG><a name="[8c]"></a>FL_ATIM_GenerateUpdateEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_atim.o(i.FL_ATIM_GenerateUpdateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_Init
</UL>

<P><STRONG><a name="[8d]"></a>FL_ATIM_IsActiveFlag_Update</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33lg0xx_fl_atim.o(i.FL_ATIM_IsActiveFlag_Update))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_Init
</UL>

<P><STRONG><a name="[8b]"></a>FL_ATIM_SetCounterAlignedMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_atim.o(i.FL_ATIM_SetCounterAlignedMode))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_Init
</UL>

<P><STRONG><a name="[8a]"></a>FL_CMU_EnableGroup3OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_atim.o(i.FL_CMU_EnableGroup3OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_Init
</UL>

<P><STRONG><a name="[89]"></a>FL_CMU_EnableGroup4BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_atim.o(i.FL_CMU_EnableGroup4BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_ATIM_Init
</UL>

<P><STRONG><a name="[94]"></a>FL_CAN_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_can.o(i.FL_CAN_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_CAN_Init
</UL>

<P><STRONG><a name="[ac]"></a>FL_CMU_DisableGroup2BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_CMU_DisableGroup2BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[ab]"></a>FL_CMU_DisableGroup3OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_CMU_DisableGroup3OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[9d]"></a>FL_CMU_EnableGroup2BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_CMU_EnableGroup2BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[9f]"></a>FL_CMU_EnableGroup3OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_CMU_EnableGroup3OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a5]"></a>FL_FLASH_ClearFlag_EraseComplete</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_ClearFlag_EraseComplete))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a1]"></a>FL_FLASH_EnableErase</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_EnableErase))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[ad]"></a>FL_FLASH_EnableProgram</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_EnableProgram))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
</UL>

<P><STRONG><a name="[9e]"></a>FL_FLASH_GetFlashLockStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_GetFlashLockStatus))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a8]"></a>FL_FLASH_IsActiveFlag_AuthenticationError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_AuthenticationError))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a6]"></a>FL_FLASH_IsActiveFlag_ClockError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_ClockError))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a9]"></a>FL_FLASH_IsActiveFlag_EraseComplete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_EraseComplete))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a7]"></a>FL_FLASH_IsActiveFlag_KeyError</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_KeyError))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[ae]"></a>FL_FLASH_IsActiveFlag_ProgramComplete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_IsActiveFlag_ProgramComplete))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
</UL>

<P><STRONG><a name="[aa]"></a>FL_FLASH_LockFlash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_LockFlash))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a0]"></a>FL_FLASH_SetFlashEraseType</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_SetFlashEraseType))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a3]"></a>FL_FLASH_UnlockFlash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.FL_FLASH_UnlockFlash))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a2]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[a4]"></a>__set_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fm33lg0xx_fl_flash.o(i.__set_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_Program_Word
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_FLASH_PageErase
</UL>

<P><STRONG><a name="[b2]"></a>FL_GPIO_DisablePinAnalogSwitch</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinAnalogSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[af]"></a>FL_GPIO_DisablePinInput</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinInput))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[b1]"></a>FL_GPIO_DisablePinOpenDrain</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinOpenDrain))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[b0]"></a>FL_GPIO_DisablePinPullup</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinPullup))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[b3]"></a>FL_GPIO_DisablePinRemap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_DisablePinRemap))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[b4]"></a>FL_GPIO_SetPinMode</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, fm33lg0xx_fl_gpio.o(i.FL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPIO_Init
</UL>

<P><STRONG><a name="[b6]"></a>FL_CMU_EnableGroup4BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_gptim.o(i.FL_CMU_EnableGroup4BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
</UL>

<P><STRONG><a name="[ba]"></a>FL_GPTIM_CC_SetChannelMode</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_CC_SetChannelMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FL_GPTIM_CC_SetChannelMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
</UL>

<P><STRONG><a name="[b8]"></a>FL_GPTIM_GenerateUpdateEvent</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_GenerateUpdateEvent))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
</UL>

<P><STRONG><a name="[b7]"></a>FL_GPTIM_SetCounterAlignedMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_gptim.o(i.FL_GPTIM_SetCounterAlignedMode))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_Init
</UL>

<P><STRONG><a name="[bb]"></a>OCConfig</STRONG> (Thumb, 416 bytes, Stack size 20 bytes, fm33lg0xx_fl_gptim.o(i.OCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_GPTIM_OC_Init
</UL>

<P><STRONG><a name="[bf]"></a>FL_LPTIM32_SetETRTriggerEdge</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_lptim32.o(i.FL_LPTIM32_SetETRTriggerEdge))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_LPTIM32_Init
</UL>

<P><STRONG><a name="[c0]"></a>FL_CMU_EnableGroup3BusClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_uart.o(i.FL_CMU_EnableGroup3BusClock))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_UART_Init
</UL>

<P><STRONG><a name="[c1]"></a>FL_CMU_EnableGroup3OperationClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fm33lg0xx_fl_uart.o(i.FL_CMU_EnableGroup3OperationClock))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FL_UART_Init
</UL>

<P><STRONG><a name="[49]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[48]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[101]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[fd]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[5e]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
